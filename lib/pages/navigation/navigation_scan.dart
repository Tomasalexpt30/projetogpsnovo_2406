// beacon_scan_page.dart

// Importa√ß√µes necess√°rias para funcionalidades como TTS, Bluetooth, permiss√µes, etc.
import 'dart:async';
import 'dart:convert';
import 'dart:math' as math;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:vibration/vibration.dart';
import 'navigation_manager.dart';
import 'package:projetogpsnovo/helpers/preferences_helpers.dart';
import 'package:easy_localization/easy_localization.dart';

// Defini√ß√£o da p√°gina de scan de beacons para navega√ß√£o
class BeaconScanPage extends StatefulWidget {
  final String destino; // Nome do destino escolhido
  final Map<String, String> destinosMap; // Mapa com os nomes dos destinos e beacons associados

  const BeaconScanPage({super.key, required this.destino, required this.destinosMap});

  @override
  State<BeaconScanPage> createState() => _BeaconScanPageState();
}

class _BeaconScanPageState extends State<BeaconScanPage> with TickerProviderStateMixin {
  final FlutterTts flutterTts = FlutterTts(); // Inicializa√ß√£o do TTS (text-to-speech)
  final NavigationManager nav = NavigationManager(); // Inst√¢ncia do gestor de navega√ß√£o
  final PreferencesHelper _preferencesHelper = PreferencesHelper(); // Helper para ler defini√ß√µes do utilizador (som, idioma, etc.)

  bool isFinalizing = false; // Estado que indica se a navega√ß√£o est√° a ser finalizada

  Map<String, dynamic> mensagens = {}; // Mapa com mensagens multil√≠ngua carregadas

  late String? beaconDoDestino; // Beacon associado ao destino final

  String ultimaInstrucaoFalada = ''; //Guarda a √∫ltima instru√ß√£o falada, para evitar repeti√ß√µes

  String? localAtual; // Guarda o nome do local atual
  List<String> rota = []; // Lista com a rota definida (lista de beacons)
  int proximoPasso = 0; // √çndice do pr√≥ximo passo na rota
  bool chegou = false; // Indica se o utilizador j√° chegou ao destino
  bool isNavigationCanceled = false; // Estado para verificar se a navega√ß√£o foi cancelada

  DateTime? ultimaDetecao;  // Regista o tempo da √∫ltima dete√ß√£o de beacon (para aplicar cooldown)
  final Duration cooldown = const Duration(seconds: 4); // Dura√ß√£o de cooldown entre dete√ß√µes sucessivas
  String selectedLanguageCode = 'pt-PT'; // Idioma selecionado (padr√£o: portugu√™s de Portugal)
  // Prefer√™ncias de som e vibra√ß√£o
  bool soundEnabled = true;
  bool vibrationEnabled = true;
  // Configura√ß√µes da voz (velocidade e tom)
  double voiceSpeed = 0.6;
  double voicePitch = 1.0;

  Offset currentPosition = const Offset(300, 500); // Posi√ß√£o atual (em coordenadas relativas ao mapa)
  Offset previousPosition = const Offset(300, 500); // Posi√ß√£o anterior (para calcular deslocamento)
  Offset cameraOffset = const Offset(300, 500); // Posi√ß√£o da c√¢mara (utilizada para anima√ß√£o de movimento no mapa)
  double rotationAngle = 0.0; // √Çngulo de rota√ß√£o do indicador (ex: seta de dire√ß√£o)

  bool mostrarSeta = false; // Controla a visibilidade da seta de dire√ß√£o

  late AnimationController _cameraController; // Controlador da anima√ß√£o da c√¢mara
  late Animation<Offset> _cameraAnimation;  // Anima√ß√£o de transi√ß√£o da c√¢mara entre posi√ß√µes

  String currentFloor = 'Piso 0';  // Piso atual em exibi√ß√£o

  final Map<String, String> imagensPorPiso = { // Mapeamento de cada piso para a respetiva imagem do mapa
    'Piso -1': 'assets/images/map/-01_piso.png',
    'Piso 0': 'assets/images/map/00_piso.png',
    'Piso 1': 'assets/images/map/01_piso.png',
    'Piso 2': 'assets/images/map/02_piso.png',
  };

  String status = ''; // Texto de estado (pode ser usado para feedback visual)

  // Coordenadas relativas no mapa para cada beacon
  final Map<String, Offset> beaconPositions = {
    'Beacon 1': Offset(300, 500),
    'Beacon 3': Offset(300, 250),
    'Beacon 15': Offset(380, 95),
  };

  @override
  void initState() {
    super.initState();
    _cameraController = AnimationController( // Inicializa o controlador de anima√ß√£o para a c√¢mara
      vsync: this,
      duration: const Duration(milliseconds: 1000),
    );
    pedirPermissoes();  // Solicita permiss√µes necess√°rias ao utilizador (Bluetooth, localiza√ß√£o, etc.)
  }

  /// Fun√ß√£o para finalizar a navega√ß√£o
  Future<void> finalizarNavegacao() async {
    print('[DEBUG] Scan parado - navega√ß√£o conclu√≠da');
    FlutterBluePlus.stopScan();  // Para o scan de Bluetooth

    // Caso a vibra√ß√£o esteja ativa, vibra o dispositivo para notificar fim da navega√ß√£o
    if (vibrationEnabled) {
      print('[DEBUG] Vibra√ß√£o longa - navega√ß√£o conclu√≠da');
      Vibration.vibrate(duration: 800);
    }

    await falar(mensagens['alerts']?['navigation_end_alert'] ?? 'Navega√ß√£o concluida.'); // Fala a mensagem final de navega√ß√£o (localizada por idioma)

    // Atualiza o estado para indicar que o utilizador chegou ao destino
    setState(() {
      chegou = true; // Estado que bloqueia novas intera√ß√µes e exibe mensagem final
      status = 'beacon_scan_page.navigation_end'.tr(); // Mensagem localizada de fim de navega√ß√£o
    }); // Flag que impede novas leituras de beacons enquanto finaliza
    isFinalizing = true; // üîí Bloquear novas leituras
  }

  Future<void> pedirPermissoes() async { // Solicita permiss√µes necess√°rias para funcionamento da navega√ß√£o via Bluetooth
    await [
      Permission.bluetooth,
      Permission.bluetoothScan,
      Permission.bluetoothConnect,
      Permission.locationWhenInUse,
    ].request();

    await _loadSettings(); // Carrega defini√ß√µes de som, voz, idioma, etc.
    await nav.carregarInstrucoes(selectedLanguageCode); // Carrega instru√ß√µes de navega√ß√£o no idioma selecionado
    beaconDoDestino = nav.getBeaconDoDestino(widget.destino); // Obt√©m o beacon associado ao destino
    iniciarScan(); // Inicia o processo de scan de beacons
  }

  // Carrega as defini√ß√µes do utilizador guardadas em prefer√™ncias
  Future<void> _loadSettings() async {
    final settings = await _preferencesHelper.loadSoundSettings();
    setState(() {
      selectedLanguageCode = settings['selectedLanguageCode'] ?? 'pt-PT';
      soundEnabled = settings['soundEnabled'];
      vibrationEnabled = settings['vibrationEnabled'];
      voiceSpeed = settings['voiceSpeed'] ?? 0.6;
      voicePitch = settings['voicePitch'] ?? 1.0;
    });
    await _carregarMensagens();  // Carrega mensagens de voz localizadas conforme o idioma
  }

  // Carrega o ficheiro JSON com as mensagens de voz correspondentes ao idioma
  Future<void> _carregarMensagens() async {
    String langCode = selectedLanguageCode.toLowerCase().split('-')[0];
    String fullCode = selectedLanguageCode.toLowerCase().replaceAll('_', '-');
    List<String> paths = [
      'assets/tts/navigation/nav_$fullCode.json',
      'assets/tts/navigation/nav_$langCode.json',
      'assets/tts/navigation/nav_en.json', // fallback para ingl√™s
    ];

    String? jsonString;
    for (String path in paths) {
      try {
        jsonString = await rootBundle.loadString(path);
        break; // Sai assim que encontrar o primeiro v√°lido
      } catch (_) {}
    }
    setState(() {
      mensagens = jsonString != null ? json.decode(jsonString) : {};
      status = mensagens['alerts']?['searching_alert'] ?? ''; // Mensagem "A procurar..."
    });
  }

  // Inicia o scan por beacons Bluetooth
  void iniciarScan() {
    FlutterBluePlus.startScan(); // Inicia o scan

    // Escuta os resultados do scan em tempo real
    FlutterBluePlus.scanResults.listen((results) async {
      if (chegou || isNavigationCanceled || isFinalizing) return; // Ignora se a navega√ß√£o j√° terminou

      for (final result in results) {
        final beacon = nav.parseBeaconData(result); // Tenta interpretar os dados do beacon
        if (beacon == null) continue;

        final local = nav.getLocalizacao(beacon); // Converte para localiza√ß√£o conhecida
        if (local == null) continue;

        final agora = DateTime.now();
        if (ultimaDetecao != null && agora.difference(ultimaDetecao!) < cooldown && local == localAtual) {
          continue; // Aplica cooldown para evitar spam de leituras repetidas
        }

        ultimaDetecao = agora;

        // üîπ Caso 1: o utilizador j√° est√° no beacon do destino e n√£o h√° rota definida
        if (rota.isEmpty) {
          if (local == nav.getBeaconDoDestino(widget.destino)) {
            isFinalizing = true;

            print('[DEBUG] J√° est√° no beacon do destino: $local');

            if (vibrationEnabled) {
              print('[DEBUG] Vibra√ß√£o curta - j√° est√° no beacon do destino');
              Vibration.vibrate(duration: 400);
            }

            // Busca a instru√ß√£o associada diretamente ao beacon final
            final instrucaoDireta = nav.buscarInstrucaoNoBeacon(local, widget.destino);
            if (instrucaoDireta != null && instrucaoDireta.isNotEmpty) {
              print('[DEBUG] A falar instru√ß√£o direta: $instrucaoDireta');
              // Atualiza a visualiza√ß√£o com a seta no local
              atualizarPosicaoVisual(local); // üëâ Mostra seta
              setState(() {
                mostrarSeta = true;
              });
              await falar(instrucaoDireta);  // Fala a instru√ß√£o de chegada
            }

            // Encerra o scan de Bluetooth
            FlutterBluePlus.stopScan();
            print('[DEBUG] Scan parado - navega√ß√£o conclu√≠da');
            if (vibrationEnabled) {
              print('[DEBUG] Vibra√ß√£o longa - navega√ß√£o conclu√≠da');
              Vibration.vibrate(duration: 600);
            }

            setState(() {
              chegou = true; // Atualiza o estado indicando que o utilizador chegou ao destino
              status = 'beacon_scan_page.navigation_end'.tr(); // Mostra mensagem traduzida de fim de navega√ß√£o
            });

            // Fala a mensagem final de navega√ß√£o (ex: "Navega√ß√£o conclu√≠da.")
            await falar(mensagens['alerts']?['navigation_end_alert'] ?? 'Navega√ß√£o conclu√≠da.');
            return;
          } else {
            // üîπ Caso o utilizador esteja num beacon inicial mas ainda n√£o est√° no destino
            // Gerar a rota do beacon atual at√© ao destino usando o algoritmo de Dijkstra
            final caminho = nav.dijkstra(local, widget.destino);

            // Se o caminho for v√°lido e tiver mais de um passo
            if (caminho != null && caminho.length > 1) {
              rota = caminho; // Define a rota
              proximoPasso = 1; // Define o pr√≥ximo passo (posi√ß√£o 1 da rota)
              localAtual = local; // Guarda a localiza√ß√£o atual

              atualizarPosicaoVisual(local); // Atualiza a seta no mapa

              final instrucao = nav.getInstrucoes(caminho)[0]; // Pega a primeira instru√ß√£o
              print('[DEBUG] Instru√ß√£o inicial: $instrucao');
              await falar(instrucao); // Fala a primeira instru√ß√£o

              if (vibrationEnabled) {
                print('[DEBUG] Vibra√ß√£o curta - in√≠cio de navega√ß√£o');
                Vibration.vibrate(duration: 400); // Vibra√ß√£o para indicar in√≠cio da rota
              }

              setState(() {
                mostrarSeta = true; // Ativa visualiza√ß√£o da seta
              });
            } else {
              // Se n√£o for poss√≠vel calcular o caminho at√© o destino
              print('[DEBUG] Caminho n√£o encontrado.');
              await falar(mensagens['alerts']?['path_not_found_alert'] ?? 'Caminho n√£o encontrado.');
              finalizar(); // Encerra o processo de navega√ß√£o
            }
            return;
          }
        }

        // üîπ Caso 2: O utilizador est√° a meio do percurso (n√£o √© in√≠cio nem destino)
        if (proximoPasso < rota.length && local == rota[proximoPasso]) {
          localAtual = local; // Atualiza a localiza√ß√£o atual
          atualizarPosicaoVisual(local); // Atualiza visual no mapa (ex. seta)

          // Verifica se este beacon leva diretamente ao destino
          final destinosDoBeaconAtual = List<String>.from(
            nav.jsonBeacons[localAtual]?['beacon_destinations'] ?? [],
          );

          // üî∏ Se for o √∫ltimo passo antes do destino
          if (!isFinalizing && destinosDoBeaconAtual.contains(widget.destino)) {
            isFinalizing = true; // Impede novas instru√ß√µes ou atualiza√ß√µes

            if (vibrationEnabled) {
              print('[DEBUG] Vibra√ß√£o curta - √∫ltimo passo');
              Vibration.vibrate(duration: 400); // Vibra√ß√£o curta para indicar chegada iminente
            }

            // Busca a instru√ß√£o espec√≠fica do beacon para o destino (ex: "Chegou ao Audit√≥rio")
            final instrucaoFinal = nav.buscarInstrucaoNoBeacon(localAtual!, widget.destino);
            if (instrucaoFinal != null && instrucaoFinal.isNotEmpty) {
              print('[DEBUG] Instru√ß√£o direta de beacon para destino: $instrucaoFinal');
              await falar(instrucaoFinal); // Fala a instru√ß√£o final
            }

            // Finaliza o scan
            FlutterBluePlus.stopScan();
            print('[DEBUG] Scan parado - navega√ß√£o conclu√≠da');

            if (vibrationEnabled) {
              print('[DEBUG] Vibra√ß√£o longa - navega√ß√£o conclu√≠da');
              Vibration.vibrate(duration: 600); // Vibra√ß√£o longa para indicar fim de navega√ß√£o
            }

            // Atualiza estado para refletir que a navega√ß√£o terminou
            setState(() {
              chegou = true;
              status = 'beacon_scan_page.navigation_end'.tr();
            });

            // Fala a mensagem de fim de navega√ß√£o
            await falar(mensagens['alerts']?['navigation_end_alert'] ?? 'Navega√ß√£o conclu√≠da.');
            return;
          }

          // üî∏ Caso interm√©dio: ainda est√° a seguir o percurso, mas n√£o √© o √∫ltimo beacon
          if (!isFinalizing) {
            final instrucao = nav.getInstrucoes(rota)[proximoPasso]; // Busca instru√ß√£o da etapa atual
            print('[DEBUG] Instru√ß√£o interm√©dia: $instrucao');

            if (vibrationEnabled) {
              print('[DEBUG] Vibra√ß√£o curta - passo interm√©dio');
              Vibration.vibrate(duration: 400); // Vibra√ß√£o curta como feedback
            }

            await falar(instrucao); // Fala a instru√ß√£o da etapa atual
            proximoPasso++; // Avan√ßa para o pr√≥ximo passo da rota
          }

          return; // Termina processamento deste ciclo
        }
      }
    });
  }



  void atualizarPosicaoVisual(String local) {
    final newPosition = beaconPositions[local] ?? const Offset(300, 500); // Obt√©m a nova posi√ß√£o do beacon (ou posi√ß√£o padr√£o se n√£o estiver no mapa)
    final delta = newPosition - currentPosition; // Calcula o vetor entre a posi√ß√£o atual e a nova
    final angle = math.atan2(delta.dy, delta.dx) + math.pi / 2; // Calcula o √¢ngulo de rota√ß√£o com base no vetor de movimento (em radianos)

    // Define a anima√ß√£o de movimento da c√¢mara (suaviza o movimento no mapa)
    _cameraAnimation = Tween<Offset>(begin: cameraOffset, end: newPosition).animate(
      CurvedAnimation(parent: _cameraController, curve: Curves.easeInOut),
    )..addListener(() {
      setState(() { // Atualiza a posi√ß√£o da c√¢mara animada
        cameraOffset = _cameraAnimation.value;
      });
    });

    _cameraController.forward(from: 0); // Inicia a anima√ß√£o da c√¢mara

    setState(() { // Atualiza os estados visuais da posi√ß√£o e seta
      previousPosition = currentPosition;
      currentPosition = newPosition;
      rotationAngle = angle;      // Atualiza rota√ß√£o da seta
      mostrarSeta = true;         // Mostra a seta no ecr√£
    });
  }

  void finalizar() {
    FlutterBluePlus.stopScan(); // Encerra o scan de beacons
    chegou = true;              // Marca que o destino foi alcan√ßado

    if (vibrationEnabled) { // Se o dispositivo suportar vibra√ß√£o, ativa vibra√ß√£o longa
      Vibration.hasVibrator().then((hasVibrator) {
        if (hasVibrator ?? false) Vibration.vibrate(duration: 600);
      });
    }
  }

  Future<void> falar(String texto) async {
    if (soundEnabled && texto.isNotEmpty) { // Se o som estiver ativado e houver texto v√°lido
      setState(() {
        ultimaInstrucaoFalada = texto; // Guarda o √∫ltimo texto falado
      });

      await flutterTts.stop();                        // Garante que n√£o sobrep√µe falas
      await flutterTts.setLanguage(selectedLanguageCode); // Define idioma
      await flutterTts.setSpeechRate(voiceSpeed);     // Define velocidade da fala
      await flutterTts.setPitch(voicePitch);          // Define tom da fala
      await flutterTts.speak(texto);                  // Fala o texto
    }
  }

  void cancelarNavegacao() {
    setState(() {
      isNavigationCanceled = true; // Marca navega√ß√£o como cancelada
      status = mensagens['alerts']?['navigation_cancelled_alert'] ?? ''; // Mensagem de cancelamento
    });

    FlutterBluePlus.stopScan(); // Para o scan de beacons
    flutterTts.stop();          // Para qualquer fala em andamento

    Navigator.pop(context);     // Volta √† p√°gina anterior
  }

  void mostrarDescricao() async {
    if (localAtual != null && mensagens['beacons']?[localAtual] != null) { // Verifica se h√° um beacon atual detetado e se tem descri√ß√£o
      final descricao = mensagens['beacons']?[localAtual]?['beacon_description'];

      if (descricao != null && descricao.isNotEmpty) {
        print('[DEBUG] A falar descri√ß√£o do beacon atual: $descricao');
        await falar(descricao); // Fala a descri√ß√£o associada ao beacon
      } else {
        print('[DEBUG] Descri√ß√£o indispon√≠vel para o beacon atual: $localAtual');
        await falar('Descri√ß√£o indispon√≠vel para o beacon atual.');
      }
    } else {
      print('[DEBUG] Ainda n√£o foi detetado nenhum beacon.');
      await falar('Ainda n√£o foi detetado nenhum beacon.');
    }
  }

  @override
  void dispose() {
    flutterTts.stop();                // Para qualquer fala pendente
    FlutterBluePlus.stopScan();      // Para o scan de beacons
    _cameraController.dispose();     // Liberta recursos da anima√ß√£o
    super.dispose();                 // Chama o metodo base
  }

  String obterLocalAtual() {
    // Retorna o nome do local atual, ou a mensagem "A procurar..." se ainda n√£o houver localiza√ß√£o
    return localAtual ?? (mensagens['alerts']?['searching_alert'] ?? '');
  }

  String obterProximaParagem() {
    if (rota.isEmpty || proximoPasso >= rota.length) { // Se a rota estiver vazia ou o √≠ndice estiver fora dos limites, retorna mensagem de fim
      return mensagens['alerts']?['end_of_route_alert'] ?? '';
    }
    return rota[proximoPasso]; // Caso contr√°rio, retorna o pr√≥ximo beacon da rota
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          Positioned.fill(
            child: InteractiveViewer(
              panEnabled: true, // Permite arrastar
              scaleEnabled: true, // Permite zoom
              minScale: 1.0,
              maxScale: 3.5,
              constrained: false,
              boundaryMargin: const EdgeInsets.all(100), // Margem ao arrastar
              child: Stack(
                children: [
                  // Aplica offset da c√¢mara ao mapa
                  Transform.translate(
                    offset: Offset(-cameraOffset.dx + 150, -cameraOffset.dy + 320),
                    child: Stack(
                      children: [
                        // Imagem do piso atual
                        Image.asset(
                          imagensPorPiso[currentFloor]!,
                          fit: BoxFit.none,
                          alignment: Alignment.topLeft,
                        ),
                        // Seta animada para mostrar a posi√ß√£o atual
                        if (mostrarSeta)
                          AnimatedPositioned(
                            duration: const Duration(milliseconds: 1000),
                            curve: Curves.easeInOut,
                            left: currentPosition.dx,
                            top: currentPosition.dy,
                            child: Transform.rotate(
                              angle: rotationAngle, // Aponta na dire√ß√£o do movimento
                              child: const Icon(Icons.navigation, size: 40, color: Colors.red),
                            ),
                          ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),

          // Widget deslizante na parte inferior da tela (como uma folha que pode ser expandida)
          DraggableScrollableSheet(
            minChildSize: 0.20,  // Altura m√≠nima (20% da tela)
            maxChildSize: 0.32,  // Altura m√°xima (32% da tela)
            initialChildSize: 0.32,  // Altura inicial ao abrir a p√°gina
            builder: (context, controller) {
              return Container(
                padding: const EdgeInsets.all(16),  // Espa√ßamento interno do painel
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.95),  // Fundo branco com ligeira transpar√™ncia
                  borderRadius: const BorderRadius.vertical(top: Radius.circular(12)),  // Cantos arredondados no topo
                  boxShadow: const [
                    BoxShadow(
                      color: Colors.black26,  // Sombra leve
                      blurRadius: 6,          // Suaviza a sombra
                    ),
                  ],
                ),
                child: SingleChildScrollView(
                  controller: controller,  // Controlador que sincroniza com o deslize da folha
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,  // Centraliza conte√∫do horizontalmente
                    children: [
                      // T√≠tulo com o destino selecionado, traduzido
                      Text(
                        '${'beacon_scan_page.destination'.tr()}: ${widget.destino}',
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 20),  // Espa√ßo entre o t√≠tulo e os pr√≥ximos widgets
                      if (!chegou) ...[ // Se ainda n√£o chegou ao destino, mostra informa√ß√£o do estado atual
                        Container(
                          padding: const EdgeInsets.all(12), // Espa√ßamento interno
                          decoration: BoxDecoration(
                            // Cor de fundo muda conforme se h√° ou n√£o instru√ß√£o falada
                            color: ultimaInstrucaoFalada.isEmpty ? Colors.yellow[100] : Colors.blue[100],
                            borderRadius: BorderRadius.circular(10), // Cantos arredondados
                          ),
                          child: Row(
                            children: [
                              // √çcone que representa o estado atual: alerta ou voz
                              Icon(
                                ultimaInstrucaoFalada.isEmpty ? Icons.warning : Icons.campaign, // Se n√£o h√° fala ‚Üí alerta, sen√£o ‚Üí megafone
                                color: ultimaInstrucaoFalada.isEmpty ? Colors.orange : Colors.blue, // Cor de acordo com o √≠cone
                                size: 30,
                              ),
                              const SizedBox(width: 10), // Espa√ßo entre √≠cone e texto
                              Expanded(
                                child: Center(
                                  child: Text(
                                    // Mostra a √∫ltima instru√ß√£o falada ou a mensagem "A procurar..."
                                    ultimaInstrucaoFalada.isNotEmpty
                                        ? ultimaInstrucaoFalada
                                        : '${mensagens['alerts']?['searching_alert'] ?? 'A procurar...'}',
                                    textAlign: TextAlign.center,
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                      // Cor muda conforme h√° ou n√£o instru√ß√£o falada
                                      color: ultimaInstrucaoFalada.isEmpty ? Colors.orange[900] : Colors.blue[900],
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ]
                      else ...[ // Caso o utilizador j√° tenha chegado ao destino
                        // Mostra mensagem de navega√ß√£o conclu√≠da
                        Container(
                          padding: const EdgeInsets.all(12), // Espa√ßamento interno
                          decoration: BoxDecoration(
                            color: Colors.green[100], // Fundo verde claro para indicar sucesso
                            borderRadius: BorderRadius.circular(10), // Cantos arredondados
                          ),
                          child: Row(
                              children: [
                              // √çcone de sucesso (check verde)
                              const Icon(Icons.check_circle, color: Colors.green, size: 30),
                          const SizedBox(width: 10), // Espa√ßo entre √≠cone e texto
                          Expanded(
                            child: Center(
                              child: Text(
                                status, // Mensagem de estado (ex: "Navega√ß√£o conclu√≠da.")
                                textAlign: TextAlign.center,
                                style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.bold,)
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                      const SizedBox(height: 20), // Espa√ßamento vertical antes da linha de bot√µes

                      Row(
                        children: [
                          // üìò Bot√£o para ouvir a descri√ß√£o do local atual
                          Expanded( // Ocupa metade da largura dispon√≠vel
                            child: ElevatedButton.icon(
                              onPressed: mostrarDescricao, // Chama a fun√ß√£o que l√™ a descri√ß√£o do beacon atual
                              icon: const Icon(Icons.info), // √çcone de informa√ß√£o
                              label: Text('beacon_scan_page.description'.tr()), // Texto traduzido do bot√£o
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.blueAccent, // Fundo azul
                                foregroundColor: Colors.white, // Texto e √≠cone brancos
                              ),
                            ),
                          ),

                          const SizedBox(width: 10), // Espa√ßo entre os dois bot√µes

                          // ‚ùå Bot√£o para cancelar a navega√ß√£o
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: cancelarNavegacao, // Chama a fun√ß√£o para cancelar e sair da navega√ß√£o
                              icon: const Icon(Icons.cancel), // √çcone de cancelamento
                              label: Text('beacon_scan_page.cancel_navigation'.tr()), // Texto traduzido do bot√£o
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.redAccent, // Fundo vermelho
                                foregroundColor: Colors.white, // Texto e √≠cone brancos
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}
